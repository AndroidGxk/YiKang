package com.example.sqlite.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.yikangcheng.admin.yikang.bean.CreatOrderBean;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "CREAT_ORDER_BEAN".
*/
public class CreatOrderBeanDao extends AbstractDao<CreatOrderBean, Long> {

    public static final String TABLENAME = "CREAT_ORDER_BEAN";

    /**
     * Properties of entity CreatOrderBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Uid = new Property(0, long.class, "uid", true, "_id");
        public final static Property PayType = new Property(1, String.class, "payType", false, "PAY_TYPE");
        public final static Property Balance = new Property(2, String.class, "balance", false, "BALANCE");
        public final static Property OrderNo = new Property(3, String.class, "orderNo", false, "ORDER_NO");
        public final static Property BankAmount = new Property(4, String.class, "bankAmount", false, "BANK_AMOUNT");
        public final static Property PriceKey = new Property(5, String.class, "priceKey", false, "PRICE_KEY");
        public final static Property _sumPrice = new Property(6, double.class, "_sumPrice", false, "_SUM_PRICE");
        public final static Property OrderStatus = new Property(7, String.class, "orderStatus", false, "ORDER_STATUS");
        public final static Property Success = new Property(8, boolean.class, "success", false, "SUCCESS");
        public final static Property OrderId = new Property(9, int.class, "orderId", false, "ORDER_ID");
        public final static Property SumPrice = new Property(10, double.class, "sumPrice", false, "SUM_PRICE");
        public final static Property Orderinfo = new Property(11, String.class, "orderinfo", false, "ORDERINFO");
        public final static Property TimeStamp = new Property(12, String.class, "timeStamp", false, "TIME_STAMP");
        public final static Property NonceStr = new Property(13, String.class, "nonceStr", false, "NONCE_STR");
        public final static Property Sign = new Property(14, String.class, "sign", false, "SIGN");
        public final static Property PrepayId = new Property(15, String.class, "prepayId", false, "PREPAY_ID");
        public final static Property IsZeroPurchase = new Property(16, int.class, "isZeroPurchase", false, "IS_ZERO_PURCHASE");
    }


    public CreatOrderBeanDao(DaoConfig config) {
        super(config);
    }
    
    public CreatOrderBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"CREAT_ORDER_BEAN\" (" + //
                "\"_id\" INTEGER PRIMARY KEY NOT NULL ," + // 0: uid
                "\"PAY_TYPE\" TEXT," + // 1: payType
                "\"BALANCE\" TEXT," + // 2: balance
                "\"ORDER_NO\" TEXT," + // 3: orderNo
                "\"BANK_AMOUNT\" TEXT," + // 4: bankAmount
                "\"PRICE_KEY\" TEXT," + // 5: priceKey
                "\"_SUM_PRICE\" REAL NOT NULL ," + // 6: _sumPrice
                "\"ORDER_STATUS\" TEXT," + // 7: orderStatus
                "\"SUCCESS\" INTEGER NOT NULL ," + // 8: success
                "\"ORDER_ID\" INTEGER NOT NULL ," + // 9: orderId
                "\"SUM_PRICE\" REAL NOT NULL ," + // 10: sumPrice
                "\"ORDERINFO\" TEXT," + // 11: orderinfo
                "\"TIME_STAMP\" TEXT," + // 12: timeStamp
                "\"NONCE_STR\" TEXT," + // 13: nonceStr
                "\"SIGN\" TEXT," + // 14: sign
                "\"PREPAY_ID\" TEXT," + // 15: prepayId
                "\"IS_ZERO_PURCHASE\" INTEGER NOT NULL );"); // 16: isZeroPurchase
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"CREAT_ORDER_BEAN\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, CreatOrderBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(2, payType);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(3, balance);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(4, orderNo);
        }
 
        String bankAmount = entity.getBankAmount();
        if (bankAmount != null) {
            stmt.bindString(5, bankAmount);
        }
 
        String priceKey = entity.getPriceKey();
        if (priceKey != null) {
            stmt.bindString(6, priceKey);
        }
        stmt.bindDouble(7, entity.get_sumPrice());
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(8, orderStatus);
        }
        stmt.bindLong(9, entity.getSuccess() ? 1L: 0L);
        stmt.bindLong(10, entity.getOrderId());
        stmt.bindDouble(11, entity.getSumPrice());
 
        String orderinfo = entity.getOrderinfo();
        if (orderinfo != null) {
            stmt.bindString(12, orderinfo);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(13, timeStamp);
        }
 
        String nonceStr = entity.getNonceStr();
        if (nonceStr != null) {
            stmt.bindString(14, nonceStr);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(15, sign);
        }
 
        String prepayId = entity.getPrepayId();
        if (prepayId != null) {
            stmt.bindString(16, prepayId);
        }
        stmt.bindLong(17, entity.getIsZeroPurchase());
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, CreatOrderBean entity) {
        stmt.clearBindings();
        stmt.bindLong(1, entity.getUid());
 
        String payType = entity.getPayType();
        if (payType != null) {
            stmt.bindString(2, payType);
        }
 
        String balance = entity.getBalance();
        if (balance != null) {
            stmt.bindString(3, balance);
        }
 
        String orderNo = entity.getOrderNo();
        if (orderNo != null) {
            stmt.bindString(4, orderNo);
        }
 
        String bankAmount = entity.getBankAmount();
        if (bankAmount != null) {
            stmt.bindString(5, bankAmount);
        }
 
        String priceKey = entity.getPriceKey();
        if (priceKey != null) {
            stmt.bindString(6, priceKey);
        }
        stmt.bindDouble(7, entity.get_sumPrice());
 
        String orderStatus = entity.getOrderStatus();
        if (orderStatus != null) {
            stmt.bindString(8, orderStatus);
        }
        stmt.bindLong(9, entity.getSuccess() ? 1L: 0L);
        stmt.bindLong(10, entity.getOrderId());
        stmt.bindDouble(11, entity.getSumPrice());
 
        String orderinfo = entity.getOrderinfo();
        if (orderinfo != null) {
            stmt.bindString(12, orderinfo);
        }
 
        String timeStamp = entity.getTimeStamp();
        if (timeStamp != null) {
            stmt.bindString(13, timeStamp);
        }
 
        String nonceStr = entity.getNonceStr();
        if (nonceStr != null) {
            stmt.bindString(14, nonceStr);
        }
 
        String sign = entity.getSign();
        if (sign != null) {
            stmt.bindString(15, sign);
        }
 
        String prepayId = entity.getPrepayId();
        if (prepayId != null) {
            stmt.bindString(16, prepayId);
        }
        stmt.bindLong(17, entity.getIsZeroPurchase());
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.getLong(offset + 0);
    }    

    @Override
    public CreatOrderBean readEntity(Cursor cursor, int offset) {
        CreatOrderBean entity = new CreatOrderBean( //
            cursor.getLong(offset + 0), // uid
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // payType
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // balance
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // orderNo
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // bankAmount
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // priceKey
            cursor.getDouble(offset + 6), // _sumPrice
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // orderStatus
            cursor.getShort(offset + 8) != 0, // success
            cursor.getInt(offset + 9), // orderId
            cursor.getDouble(offset + 10), // sumPrice
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // orderinfo
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // timeStamp
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // nonceStr
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // sign
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15), // prepayId
            cursor.getInt(offset + 16) // isZeroPurchase
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, CreatOrderBean entity, int offset) {
        entity.setUid(cursor.getLong(offset + 0));
        entity.setPayType(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBalance(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setOrderNo(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setBankAmount(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setPriceKey(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.set_sumPrice(cursor.getDouble(offset + 6));
        entity.setOrderStatus(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSuccess(cursor.getShort(offset + 8) != 0);
        entity.setOrderId(cursor.getInt(offset + 9));
        entity.setSumPrice(cursor.getDouble(offset + 10));
        entity.setOrderinfo(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setTimeStamp(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setNonceStr(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setSign(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setPrepayId(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
        entity.setIsZeroPurchase(cursor.getInt(offset + 16));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(CreatOrderBean entity, long rowId) {
        entity.setUid(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(CreatOrderBean entity) {
        if(entity != null) {
            return entity.getUid();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(CreatOrderBean entity) {
        throw new UnsupportedOperationException("Unsupported for entities with a non-null key");
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
